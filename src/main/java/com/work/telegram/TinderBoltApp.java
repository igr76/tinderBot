package com.work.telegram;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;

public class TinderBoltApp extends MultiSessionTelegramBot {
    public static final String TELEGRAM_BOT_NAME = "j7666bot"; //TODO: –¥–æ–±–∞–≤—å –∏–º—è –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String TELEGRAM_BOT_TOKEN = "7399956767:AAHVAfzBjCCXwXK5e-6uT_l5_v4JoRpSWSE"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String OPEN_AI_TOKEN = "gpt:FUj5RRFaxyJPx8r99jGlJFkblB3TiwFfStVTSk3zPf89Bss9"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω ChatGPT –≤ –∫–∞–≤—ã—á–∫–∞—Ö


   private ArrayList<String>  list = new ArrayList<>();
   private  UserInfo me;
   private int questionCount;
    private ChatGPTService chatGPTService;
    private DialogMode currentMode = null;
    public TinderBoltApp() {
        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);
    }

    @Override
    public void onUpdateEventReceived(Update update) {
        //TODO: –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å
        String message = update.getMessage().getText();
        if (message.equals("/start")) {
            currentMode= DialogMode.MAIN;
            sendPhotoMessage("main");
            String text = loadMessage("main");
            sendTextMessage(text);
            showMainMenu("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞","/start",
                    "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è","/profile",
                    "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞","/opener",
                    "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà","/message",
                    "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•","/date",
                    "–û–±—â–µ–Ω–∏–µ —Å –ò–ò","/gpt",
                    "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è html","/html");
            return;
        }
        //command gpt
        if (message.equals("/gpt")) {
            currentMode= DialogMode.GPT;
            sendPhotoMessage("gpt");
            String text = loadMessage("gpt");
            sendTextMessage(text);
            return;
        }
        if (currentMode== DialogMode.GPT) {
            String promt = loadPrompt("gpt");
            Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ chatGPT –¥—É–º–∞–µ—Ç");
            String answer = chatGPTService.sendMessage(promt,message);
            updateTextMessage(msg,answer);
            return;
        }
        //command date
        if (message.equals("/date")) {
            currentMode= DialogMode.DATE;
            sendPhotoMessage("date");
            String text = loadMessage("date");
            sendTextMessage(text);
            sendTextButtonsMessage("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è",
                    "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ","date_grande",
                    "–ú–∞—Ä–≥–æ –†–æ–±–±–∏","date_robbie",
                    "–ó–µ–Ω–¥–µ—è","date_zendaya",
                    "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥","date_gosling",
                    "–¢–æ–º –•–∞—Ä–¥–∏","date_hardy"
            );
            return;
        }
        if (currentMode== DialogMode.DATE) {
            String query = getCallbackQueryButtonKey();
            if (query.startsWith("date")) {
                sendPhotoMessage(query);
                sendTextMessage("–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! \n –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É" +
                        "–∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π");
                String promt = loadPrompt(query);
                Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ chatGPT –¥—É–º–∞–µ—Ç");
                String answer = chatGPTService.addMessage(promt);
                updateTextMessage(msg,answer);
                return;
            }
        }
            //command message
        if (message.equals("/message")) {
                currentMode= DialogMode.MESSAGE;
                sendPhotoMessage("message");
                String text = loadMessage("message");
                sendTextMessage(text);
                sendTextButtonsMessage("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—É –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è",
                        "C–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ","next",
                        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ","message_date"
                );
                return;
        }
        if (currentMode== DialogMode.MESSAGE) {
                String query = getCallbackQueryButtonKey();
                if (query.startsWith("message")) {
                    sendPhotoMessage(query);
                   String userChatHistory = String.join("\n\n",list);
                    String promt = loadPrompt(query);
                   Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ chatGPT –¥—É–º–∞–µ—Ç");
                   String answer = chatGPTService.sendMessage(promt,userChatHistory);
                    updateTextMessage(msg,answer);
                }
            list.add(message);
            return;
        }
        //command profile
        if (message.equals("/profile")) {
            currentMode= DialogMode.PROFILE;
            sendPhotoMessage("profile");
            me= new UserInfo();
            questionCount=1;
            sendTextMessage("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
            return;
        }
        if (currentMode== DialogMode.PROFILE) {
            switch (questionCount) {
                case 1:me.age=message;
                    questionCount=2;
                    sendTextMessage("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
                    return;
                case 2:me.occupation=message; questionCount=3;
                        sendTextMessage("–ö–∞–∫–æ–µ —É –≤–∞—Å —Ö–æ–±–±–∏?");
                        return;
                case 3:me.hobby=message;questionCount=4;
                    sendTextMessage("–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?");
                    return;
                case 4:me.annoys=message;questionCount=5;
                    sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                    return;
                case 5:me.goals=message;
                    String promt = loadPrompt("profile");
                    Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ chatGPT –¥—É–º–∞–µ—Ç");
                    String answer = chatGPTService.sendMessage(promt,message);
                    updateTextMessage(msg,answer);
                    return;
            }
            return;


        }
        //command orener
        if (message.equals("/opener")) {
            currentMode= DialogMode.OPENER;
            sendPhotoMessage("opener");
            String text = loadMessage("opener");
            me= new UserInfo();
            questionCount=1;
            sendTextMessage("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
            return;
        }
        if (currentMode== DialogMode.OPENER) {
            switch (questionCount) {
                case 1:me.age=message;
                    questionCount=2;
                    sendTextMessage("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?");
                    return;
                case 2:me.occupation=message; questionCount=3;
                    sendTextMessage("–ï—Å—Ç—å –ª–∏ —É –Ω–µ—ë  —Ö–æ–±–±–∏? –∏ –∫–∞–∫–∏–µ");
                    return;
                case 3:me.hobby=message;questionCount=4;
                    sendTextMessage("–ß—Ç–æ –µ–π –Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?");
                    return;
                case 4:me.annoys=message;questionCount=5;
                    sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                    return;
                case 5:me.goals=message;
            String aboutFriend= message;
            String promt = loadPrompt("opener");
                Message msg = sendTextMessage("–ü–æ–¥–æ–∂–¥–∏—Ç–µ chatGPT –¥—É–º–∞–µ—Ç");
                String answer = chatGPTService.sendMessage(promt,aboutFriend);
                updateTextMessage(msg,answer);

            return;}
        }



    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
        telegramBotsApi.registerBot(new TinderBoltApp());
    }
}
